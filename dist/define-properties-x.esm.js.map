{"version":3,"sources":["../src/define-properties-x.js"],"names":[],"mappings":";;AAAA,OAAO,UAAP,MAAuB,eAAvB;AACA,OAAO,OAAP,MAAoB,kBAApB;AACA,OAAO,cAAP,MAA2B,0BAA3B;AACA,OAAO,OAAP,MAAoB,2BAApB;AAEA;;AACA,IAAM,WAAW,GAAG,KAAK,WAAzB;AAEA;;;;;;;;;;;;;AAYA,OAAO,IAAM,QAAQ,GAAG,SAAS,QAAT,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,KAAhC,EAAuC,KAAvC,EAA8C;AACpE,MAAI,IAAI,IAAI,MAAR,IAAkB,WAAW,CAAC,KAAD,CAAX,KAAuB,KAA7C,EAAoD;AAClD;AACD;;AAED,EAAA,cAAc,CAAC,MAAD,EAAS,IAAT,EAAe;AAC3B,IAAA,YAAY,EAAE,IADa;AAE3B,IAAA,UAAU,EAAE,KAFe;AAG3B,IAAA,KAAK,EAAL,KAH2B;AAI3B,IAAA,QAAQ,EAAE;AAJiB,GAAf,CAAd;AAMD,CAXM;AAaP;;;;;;;;;;;;;AAYA,OAAO,IAAM,UAAU,GAAG,SAAS,UAAT,CAAoB,MAApB,EAA4B,GAA5B,EAAiC,UAAjC,EAA6C;AAAA;;AACrE,MAAM,KAAK,GAAG,OAAO,UAAP,KAAsB,WAAtB,GAAoC,EAApC,GAAyC,UAAvD;AACA,EAAA,OAAO,CAAC,OAAO,CAAC,GAAD,CAAR,EAAe,UAAC,IAAD,EAAU;AAAA;;AAC9B,QAAM,SAAS,GAAG,KAAK,CAAC,IAAD,CAAvB;AACA,IAAA,QAAQ,CAAC,MAAD,EAAS,IAAT,EAAe,GAAG,CAAC,IAAD,CAAlB,EAA0B,UAAU,CAAC,SAAD,CAAV,IAAyB,SAAS,EAA5D,CAAR;AACD,GAHM,YAAP;AAID,CANM","file":"define-properties-x.esm.js","sourcesContent":["import isFunction from 'is-function-x';\nimport forEach from 'array-for-each-x';\nimport defineProperty from 'object-define-property-x';\nimport getKeys from 'get-own-enumerable-keys-x';\n\n/**  @type {BooleanConstructor} */\nconst castBoolean = true.constructor;\n\n/**\n * Just like `properties` but for defining a single non-enumerable\n * property. Useful in environments that do not\n * support `Computed property names`. This can be done\n * with `properties`, but this method can read a little cleaner.\n *\n * @function\n * @param {object} object - The object on which to define the property.\n * @param {string|Symbol} prop - The property name.\n * @param {*} value - The value of the property.\n * @param {boolean} [force=false] - If `true` then set property regardless.\n */\nexport const property = function property(object, prop, value, force) {\n  if (prop in object && castBoolean(force) === false) {\n    return;\n  }\n\n  defineProperty(object, prop, {\n    configurable: true,\n    enumerable: false,\n    value,\n    writable: true,\n  });\n};\n\n/**\n * Define multiple non-enumerable properties at once.\n * Uses `Object.defineProperty` when available; falls back to standard\n * assignment in older engines. Existing properties are not overridden.\n * Accepts a map of property names to a predicate that, when true,\n * force-overrides.\n *\n * @function\n * @param {object} object - The object on which to define the property.\n * @param {object} map - The object of properties.\n * @param {object} [predicates] - The object of property predicates.\n */\nexport const properties = function properties(object, map, predicates) {\n  const preds = typeof predicates === 'undefined' ? {} : predicates;\n  forEach(getKeys(map), (name) => {\n    const predicate = preds[name];\n    property(object, name, map[name], isFunction(predicate) && predicate());\n  });\n};\n"]}